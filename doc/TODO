ROADMAP
=======

* release 0.5.0
	* AMD64 (SSE2)
		* arithmetics
		* branches
		* conversions
		* ureg/lreg/sreg
		* argument reading
		* load/store
		* argument passing
	* amd64 -> should not use macros starting with x86_
	* test-cases involving large numbers of arguments
	* prepare -> without argument

+ release 0.5.1
	* BUG: stack corruption
	+ SPARC
		* arithmetics
		* branches
		* ureg/lreg/sreg
		* argument reading
		* conversions
		* load/store
		* argument passing

+ release 0.5.2
	+ arguments passed by registers should not be assigned to other registers if read by GETARG and there is no other GETARG which reads this argument
	+ UREG should not set the value of argument passed if saving the value back to the stack (SPARC, AMD64?)
	+ SPARC: vararg stack corruption
	+ SPARC: get_arg should optimize moves of aligned doubles


+ release 0.6.0
	+ AMD64
		+ BUG: CALLR -- registers used to pass arguments can overwrite register to which used to set target
		+ passing arguments via register reads values from the memory even if it is not necessary


+ release 0.7.0
	+ BUG: it is impossible to generete two or more functions with one instance of the compiler (see jit_prolog)
	+ i386 (emulated)
		+ arithmetics
		+ conversions
		+ load/store
		+ argument reading
		+ argument passing
		+ branches
		+ conditionals

+ generic (release 0.6.x+)
	+ warnings
	+ integrated disassambler
	+ separate test-cases
	+ input (i0, ..., i5) registers should be stored into their positions in the frame
	+ optimizations
	+ linear-scan reg. allocator
